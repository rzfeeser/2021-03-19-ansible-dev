---
- name: Ansible PB pulling crid with error handling
  hosts: localhost

  collections:
          - dellemc.isilon

  vars:
          # security vars
          onefs_host: 192.168.3.11    # IP address of FQDN of the Isilon cluster
          isilon_port: 8080           # defaults to 8080
          api_user: root              # mandatory - username for the REST API
          api_password: "Dees12345!"  # mandatory - password for the REST API
          verify_ssl: False           # mandatory - bool

          # storage vars
          req_quota: 1 # size in GB greater than 1 and less than 10
          base_path: "/ifs/globaluni"
          access_control: "0755"
          access_zone: "System"
          # list of users we want to provision storage for 
          users:
                  - peterParker
                  - lukeCage
                  - natashaRomanoff
                  - wandaMaximoff
                  - scottLang

          # a list of policies we want to enforce during preprovisioning
          policy:
                  - req_quota < 10   # ensure the requested quota is less than 10GB
                  - req_quota >= 1
                  - ( users is defined ) and ( users | type_debug == "list" )

  tasks:
          #preprov (policy checking... approvals)
          #     if fails: STOP,ALERT(email)
          #
          #precheck pull crid
          #     if fails: TRY for 5 mins
          #     elif fails 5 mins: STOP,ALERT(email)
          #
          #work to do (isilon)
          #     if fails: ROLLBACK
          #
          #post checks (did the isilon work, work???)
          #     if fails: ROLLBACK
          #
          #post prov (email / celebrate)

  # PREPROVISIONING
  - name: PREPROVISIONING - asserting that policy is not being violated
    block:
          # assert and fail are very close to one another
          # fail requires a when conditional
          # assert implies the when conditional
          - name: Simple prepovisioning steps (ensure policy is not being broken)
            assert:
              that: "{{ policy }}"
              fail_msg: "Request violates policy. Cannot use SaaS to provision. Make ticket request."
              success_msg: "Policy checks passed"
           

  # PRECHECK
  - name: PRECHECK PHASE - Request CRQid
    block:

          - name: Pause play until a URL is reachable from this host
            uri:
              url: http://0.0.0.0:9876/crid
              follow_redirects: none
              method: GET
            register: result
            until: result.status == 200
            retries: 24 # 5 seconds * 24 retries
            delay: 5 # Every 5 seconds

          - name: Show the value we captured
            debug:
                    var: result.json
                    verbosity: 1

    rescue:
          - name: PRECHECK PHASE - FAILED
            fail:
                    msg: "PRECHECK PHASE FAILED. Nothing to roll back... EXITING."


  # WORK TO DO (ISILON)
  - name: Change Operation
    block:
          - name: "CHANGE - Create Filesystem with Quota"
            dellemc_isilon_filesystem:
                    onefs_host: "{{ onefs_host }}"
                    port_no: "{{ isilon_port }}"
                    verify_ssl: "{{ verify_ssl }}"
                    api_user: "{{ api_user }}"
                    api_password: "{{ api_password }}"
                    path: "{{base_path}}/students/{{item}}"
                    owner:
                            name: "root"
                            provider_type: 'file'
                    access_control: "{{ access_control }}"
                    recursive: True
                    state: present
            loop: "{{ users }}"

    rescue:
          - name: RESCUE - Start Rollback
            debug:
                    msg: An error was encountered. Attempting rollback.

          - name: "RESCUE - Remove filesystem with Quota"
            dellemc_isilon_filesystem:
                    onefs_host: "{{ onefs_host }}"
                    port_no: "{{ isilon_port }}"
                    verify_ssl: "{{ verify_ssl }}"
                    api_user: "{{ api_user }}"
                    api_password: "{{ api_password }}"
                    path: "{{base_path}}/students/{{item}}"
                    owner:
                            name: "root"
                            provider_type: 'file'
                    access_control: "{{ access_control }}"
                    recursive: True
                    state: absent
            loop: "{{ users }}"
